version: '3'
services:
  web:
    image: karnban/demo:3.0
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-demo
    ports:
      - 8888:80

# PostgresDB
  db_01:
    image: postgres:16.0
    build: 
      context: postgres1
      dockerfile: Dockerfile
    container_name: postgres1
    environment:
      POSTGRES_USER: postgres1
      POSTGRES_PASSWORD: postgres1
      POSTGRES_DB: postgres1
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres1"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  db_02:
    image: postgres:16.0
    build:
      context: postgres2
      dockerfile: Dockerfile
    container_name: postgres2
    environment:
      POSTGRES_USER: postgres2
      POSTGRES_PASSWORD: postgres2
      POSTGRES_DB: postgres2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres2"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  backend1:
    image: backend1:1.0
    build: 
      context: backend1
      dockerfile: Dockerfile
    container_name: backend1
    ports:
      - 3000:3000
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      DB_HOST: db_01
      DB_NAME: postgres1
      DB_USER: postgres1
      DB_PASSWORD: postgres1
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      db_01:
        condition: service_healthy

  backend2:
    image: backend2:1.0
    build: 
      context: backend2
      dockerfile: Dockerfile
    container_name: backend2
    ports:
      - 4000:4000
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      DB_HOST: db_02
      DB_NAME: postgres2
      DB_USER: postgres2
      DB_PASSWORD: postgres2
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4000 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      db_02:
        condition: service_healthy


  backend_test:
    image: backend-test:1.0
    build: 
      context: backend-testing
      dockerfile: Dockerfile
    volumes:
      - ./backend_testing/report:/etc/newman/newman

  mock_api:
    image: mock-api:latest
    container_name: mock-api
    build:
      context: mountebank
      dockerfile: Dockerfile
    ports:
      - 2525:2525
      #- 8090:8090
      #- 8091:8091
    command: --configfile /imposters/imposters.ejs --allowInjection
    volumes:
      - ./mountebank/imposters:/imposters
